{"ast":null,"code":"var _jsxFileName = \"/Users/christianorta/MyApps/arepa-store/components/CheckoutForm.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport axios from \"axios\";\nimport styled from \"@emotion/styled\";\nimport Break from \"./Break\";\nimport BillingDetailsFields from \"./BillingDetailsFields\";\nimport SubmitButton from \"./SubmitButton\";\nimport CheckoutError from \"./CheckoutError\";\nconst CardElementContainer = styled.div`\n  height: 40px;\n  display: flex;\n  align-items: center;\n  background-color: #fff;\n\n  & .StripeElement {\n    width: 100%;\n    padding: 15px;\n  }\n`;\n\nconst CheckoutForm = ({\n  onSuccessfulCheckout\n}) => {\n  const {\n    0: isProcessing,\n    1: setProcessingTo\n  } = useState(false);\n  const {\n    0: checkoutError,\n    1: setCheckoutError\n  } = useState();\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleCardDetailsChange = event => {\n    event.error ? setCheckoutError(event.error.message) : setCheckoutError();\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    const billingDetails = {\n      name: ev.target.name.value,\n      email: ev.target.email.value,\n      address: {\n        city: ev.target.city.value,\n        line1: ev.target.address.value,\n        state: ev.target.state.value,\n        postal_code: ev.target.zip.value\n      }\n    };\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setProcessingTo(true);\n    const {\n      data: ClientSecret\n    } = await axios.post(\"/api/payment_intents\", {\n      amount: 250\n    });\n    const cardElement = elements.getElement(CardElement);\n    const paymentMethodReq = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement,\n      billing_details: billingDetails\n    });\n    const confirmedCardPayment = await stripe.confirmCardPayment(ClientSecret, {\n      payment_method: paymentMethodReq.paymentMethod.id\n    });\n    onSuccessfulCheckout();\n    appendFile(\"./success_pay_log.txt\", console.log(confirmedCardPayment));\n    console.log(confirmedCardPayment);\n  };\n\n  const CardElementOptions = {\n    style: {\n      base: {\n        fontSize: \"16px\",\n        color: \"#2e3631\",\n        \"::placeholder\": {\n          color: \"#cae3d3\"\n        }\n      }\n    },\n    hidePostalCode: true\n  };\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, __jsx(Break, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, __jsx(BillingDetailsFields, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }), __jsx(CardElementContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, __jsx(CardElement, {\n    options: CardElementOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }))), __jsx(Break, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, __jsx(SubmitButton, {\n    disabled: (isProcessing, !stripe),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, isProcessing ? \"Processing...\" : `Place Order`)));\n};\n\nexport default CheckoutForm;","map":{"version":3,"sources":["/Users/christianorta/MyApps/arepa-store/components/CheckoutForm.jsx"],"names":["React","useState","CardElement","useStripe","useElements","axios","styled","Break","BillingDetailsFields","SubmitButton","CheckoutError","CardElementContainer","div","CheckoutForm","onSuccessfulCheckout","isProcessing","setProcessingTo","checkoutError","setCheckoutError","stripe","elements","handleCardDetailsChange","event","error","message","handleSubmit","ev","preventDefault","billingDetails","name","target","value","email","address","city","line1","state","postal_code","zip","data","ClientSecret","post","amount","cardElement","getElement","paymentMethodReq","createPaymentMethod","type","card","billing_details","confirmedCardPayment","confirmCardPayment","payment_method","paymentMethod","id","appendFile","console","log","CardElementOptions","style","base","fontSize","color","hidePostalCode"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {CardElement, useStripe, useElements} from '@stripe/react-stripe-js';\nimport axios from \"axios\";\nimport styled from \"@emotion/styled\";\n\nimport Break from \"./Break\";\nimport BillingDetailsFields from \"./BillingDetailsFields\";\nimport SubmitButton from \"./SubmitButton\";\nimport CheckoutError from \"./CheckoutError\";\n\n\nconst CardElementContainer = styled.div`\n  height: 40px;\n  display: flex;\n  align-items: center;\n  background-color: #fff;\n\n  & .StripeElement {\n    width: 100%;\n    padding: 15px;\n  }\n`;\n\nconst CheckoutForm = ({ onSuccessfulCheckout }) => {\n  const [isProcessing, setProcessingTo] = useState(false);\n  const [checkoutError, setCheckoutError] = useState();\n  \n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleCardDetailsChange = (event) => {\n    event.error ? setCheckoutError(event.error.message) : setCheckoutError();\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n\n    const billingDetails = {\n      name: ev.target.name.value,\n      email: ev.target.email.value,\n      address: {\n        city: ev.target.city.value,\n        line1: ev.target.address.value,\n        state: ev.target.state.value,\n        postal_code: ev.target.zip.value\n      }\n    };\n\n    if (!stripe || !elements) {\n      return;\n    }\n    setProcessingTo(true);\n  \n    const { data: ClientSecret } = await axios.post(\"/api/payment_intents\", {\n      amount: 250\n    });\n\n    const cardElement = elements.getElement(CardElement);\n  \n    const paymentMethodReq = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement,\n      billing_details: billingDetails\n    });\n\n    const confirmedCardPayment = await stripe.confirmCardPayment(ClientSecret,{\n      payment_method: paymentMethodReq.paymentMethod.id,\n    });\n  \n    onSuccessfulCheckout();\n\n    appendFile(\"./success_pay_log.txt\", console.log(confirmedCardPayment))\n\n    console.log(confirmedCardPayment);\n  };\n  \n  \n  const CardElementOptions = {\n    style: {\n      base: {\n        fontSize: \"16px\",\n        color: \"#2e3631\", \n        \"::placeholder\": {\n          color: \"#cae3d3\"\n        }\n      }\n    },\n    hidePostalCode: true,\n    };\n  \n    return (\n      <form onSubmit={handleSubmit}>\n        <Break>\n          <BillingDetailsFields />\n          <CardElementContainer>\n            <CardElement options={CardElementOptions}/>\n          </CardElementContainer>\n        </Break>\n        <Break>\n          <SubmitButton disabled={isProcessing, !stripe}>\n            {isProcessing ? \"Processing...\" : `Place Order`}\n          </SubmitButton>\n        </Break>\n      </form>\n    );\n};\n  \nexport default CheckoutForm;\n  "]},"metadata":{},"sourceType":"module"}