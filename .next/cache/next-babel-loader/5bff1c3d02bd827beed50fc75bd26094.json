{"ast":null,"code":"var _jsxFileName = \"/Users/christianorta/MyApps/arepa-store/components/CheckoutForm.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport axios from \"axios\";\nimport styled from \"@emotion/styled\";\nimport Break from \"./Break\";\nimport BillingDetailsFields from \"./BillingDetailsFields\";\nimport SubmitButton from \"./SubmitButton\";\nimport CheckoutError from \"./CheckoutError\";\nconst CardElementContainer = styled.div`\n  height: 40px;\n  display: flex;\n  align-items: center;\n  background-color: #fff;\n\n  & .StripeElement {\n    width: 100%;\n    padding: 15px;\n  }\n`;\n\nconst CheckoutForm = ({\n  onSuccessfulCheckout\n}) => {\n  const {\n    0: isProcessing,\n    1: setProcessingTo\n  } = useState(false);\n  const {\n    0: checkoutError,\n    1: setCheckoutError\n  } = useState();\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleCardDetailsChange = event => {\n    event.error ? setCheckoutError(event.error.message) : setCheckoutError();\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    const billingDetails = {\n      name: ev.target.name.value,\n      email: ev.target.email.value,\n      address: {\n        city: ev.target.city.value,\n        line1: ev.target.address.value,\n        state: ev.target.state.value,\n        postal_code: ev.target.zip.value\n      }\n    };\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setProcessingTo(true);\n    const cardElement = elements.getElement(CardElement);\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement\n    });\n    const confirmedCardPayment = await stripe.confirmCardPayment(ClientSecret, {\n      payment_method: paymentMethodReq.paymentMethod.id\n    });\n\n    if (!error) {\n      const {\n        id\n      } = paymentMethod;\n      console.log('[PaymentMethod]', paymentMethod);\n\n      try {\n        const {\n          data\n        } = await axios.post(\"./api/paymentintent\", {\n          id,\n          amount: 250\n        });\n        console.log(data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, __jsx(CardElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    disabled: !stripe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, \"Pay\"));\n};\n\nexport default CheckoutForm;","map":{"version":3,"sources":["/Users/christianorta/MyApps/arepa-store/components/CheckoutForm.jsx"],"names":["React","useState","CardElement","useStripe","useElements","axios","styled","Break","BillingDetailsFields","SubmitButton","CheckoutError","CardElementContainer","div","CheckoutForm","onSuccessfulCheckout","isProcessing","setProcessingTo","checkoutError","setCheckoutError","stripe","elements","handleCardDetailsChange","event","error","message","handleSubmit","ev","preventDefault","billingDetails","name","target","value","email","address","city","line1","state","postal_code","zip","cardElement","getElement","paymentMethod","createPaymentMethod","type","card","confirmedCardPayment","confirmCardPayment","ClientSecret","payment_method","paymentMethodReq","id","console","log","data","post","amount"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {CardElement, useStripe, useElements} from '@stripe/react-stripe-js';\nimport axios from \"axios\";\nimport styled from \"@emotion/styled\";\n\nimport Break from \"./Break\";\nimport BillingDetailsFields from \"./BillingDetailsFields\";\nimport SubmitButton from \"./SubmitButton\";\nimport CheckoutError from \"./CheckoutError\";\n\n\nconst CardElementContainer = styled.div`\n  height: 40px;\n  display: flex;\n  align-items: center;\n  background-color: #fff;\n\n  & .StripeElement {\n    width: 100%;\n    padding: 15px;\n  }\n`;\n\nconst CheckoutForm = ({ onSuccessfulCheckout }) => {\n  const [isProcessing, setProcessingTo] = useState(false);\n  const [checkoutError, setCheckoutError] = useState();\n  \n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleCardDetailsChange = (event) => {\n    event.error ? setCheckoutError(event.error.message) : setCheckoutError();\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n\n    const billingDetails = {\n      name: ev.target.name.value,\n      email: ev.target.email.value,\n      address: {\n        city: ev.target.city.value,\n        line1: ev.target.address.value,\n        state: ev.target.state.value,\n        postal_code: ev.target.zip.value\n      }\n    };\n\n    if (!stripe || !elements) {\n      return;\n    }\n    setProcessingTo(true);\n  \n    const cardElement = elements.getElement(CardElement);\n  \n   \n    const {error, paymentMethod} = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement,\n    });\n    \n    const confirmedCardPayment = await stripe.confirmCardPayment(ClientSecret,{\n      payment_method: paymentMethodReq.paymentMethod.id,\n    });\n  \n    if (!error) {\n        const { id } = paymentMethod;\n        console.log('[PaymentMethod]', paymentMethod);\n  \n        try {\n            const {data} = await axios.post(\"./api/paymentintent\", {id, amount: 250})\n            console.log(data);\n        } catch (error) {\n        console.log(error);\n        }\n    }\n  };\n  \n\n  return (\n    <form onSubmit={handleSubmit}>\n        <CardElement />\n      <button type=\"submit\" disabled={!stripe}>\n        Pay\n      </button>\n    </form>\n  );\n };\n export default CheckoutForm;"]},"metadata":{},"sourceType":"module"}