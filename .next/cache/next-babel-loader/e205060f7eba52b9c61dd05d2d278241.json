{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/christianorta/MyApps/arepa-store/components/CheckoutForm.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  height: 40px;\\n  display: flex;\\n  align-items: center;\\n  background-color: #fff;\\n\\n  & .StripeElement {\\n    width: 100%;\\n    padding: 15px;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport axios from \"axios\";\nimport styled from \"@emotion/styled\";\nimport Break from \"./Break\";\nimport BillingDetailsFields from \"./BillingDetailsFields\";\nimport SubmitButton from \"./SubmitButton\";\nimport CheckoutError from \"./CheckoutError\";\nvar CardElementContainer = styled.div(_templateObject());\n\nvar CheckoutForm = function CheckoutForm(_ref) {\n  _s();\n\n  var onSuccessfulCheckout = _ref.onSuccessfulCheckout;\n\n  var _useState = useState(false),\n      isProcessing = _useState[0],\n      setProcessingTo = _useState[1];\n\n  var _useState2 = useState(),\n      checkoutError = _useState2[0],\n      setCheckoutError = _useState2[1];\n\n  var stripe = useStripe();\n  var elements = useElements();\n\n  var handleCardDetailsChange = function handleCardDetailsChange(event) {\n    event.error ? setCheckoutError(event.error.message) : setCheckoutError();\n  };\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ev) {\n      var billingDetails, cardElement, _yield$stripe$createP, error, paymentMethod, confirmedCardPayment, id, _yield$axios$post, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              ev.preventDefault();\n              billingDetails = {\n                name: ev.target.name.value,\n                email: ev.target.email.value,\n                address: {\n                  city: ev.target.city.value,\n                  line1: ev.target.address.value,\n                  state: ev.target.state.value,\n                  postal_code: ev.target.zip.value\n                }\n              };\n\n              if (!(!stripe || !elements)) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 4:\n              setProcessingTo(true);\n              cardElement = elements.getElement(CardElement);\n              _context.next = 8;\n              return stripe.createPaymentMethod({\n                type: 'card',\n                card: cardElement\n              });\n\n            case 8:\n              _yield$stripe$createP = _context.sent;\n              error = _yield$stripe$createP.error;\n              paymentMethod = _yield$stripe$createP.paymentMethod;\n              _context.next = 13;\n              return stripe.confirmCardPayment(ClientSecret, {\n                payment_method: paymentMethodReq.paymentMethod.id\n              });\n\n            case 13:\n              confirmedCardPayment = _context.sent;\n\n              if (error) {\n                _context.next = 28;\n                break;\n              }\n\n              id = paymentMethod.id;\n              console.log('[PaymentMethod]', paymentMethod);\n              _context.prev = 17;\n              _context.next = 20;\n              return axios.post(\"./api/paymentintent\", {\n                id: id,\n                amount: 250\n              });\n\n            case 20:\n              _yield$axios$post = _context.sent;\n              data = _yield$axios$post.data;\n              console.log(data);\n              _context.next = 28;\n              break;\n\n            case 25:\n              _context.prev = 25;\n              _context.t0 = _context[\"catch\"](17);\n              console.log(_context.t0);\n\n            case 28:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[17, 25]]);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, __jsx(CardElement, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    disabled: !stripe,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, \"Pay\"));\n};\n\n_s(CheckoutForm, \"2xw3RUxwBWLOQjltidPO4c7nnLg=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\nexport default CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/Users/christianorta/MyApps/arepa-store/components/CheckoutForm.jsx"],"names":["React","useState","CardElement","useStripe","useElements","axios","styled","Break","BillingDetailsFields","SubmitButton","CheckoutError","CardElementContainer","div","CheckoutForm","onSuccessfulCheckout","isProcessing","setProcessingTo","checkoutError","setCheckoutError","stripe","elements","handleCardDetailsChange","event","error","message","handleSubmit","ev","preventDefault","billingDetails","name","target","value","email","address","city","line1","state","postal_code","zip","cardElement","getElement","createPaymentMethod","type","card","paymentMethod","confirmCardPayment","ClientSecret","payment_method","paymentMethodReq","id","confirmedCardPayment","console","log","post","amount","data"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {CardElement, useStripe, useElements} from '@stripe/react-stripe-js';\nimport axios from \"axios\";\nimport styled from \"@emotion/styled\";\n\nimport Break from \"./Break\";\nimport BillingDetailsFields from \"./BillingDetailsFields\";\nimport SubmitButton from \"./SubmitButton\";\nimport CheckoutError from \"./CheckoutError\";\n\n\nconst CardElementContainer = styled.div`\n  height: 40px;\n  display: flex;\n  align-items: center;\n  background-color: #fff;\n\n  & .StripeElement {\n    width: 100%;\n    padding: 15px;\n  }\n`;\n\nconst CheckoutForm = ({ onSuccessfulCheckout }) => {\n  const [isProcessing, setProcessingTo] = useState(false);\n  const [checkoutError, setCheckoutError] = useState();\n  \n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleCardDetailsChange = (event) => {\n    event.error ? setCheckoutError(event.error.message) : setCheckoutError();\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n\n    const billingDetails = {\n      name: ev.target.name.value,\n      email: ev.target.email.value,\n      address: {\n        city: ev.target.city.value,\n        line1: ev.target.address.value,\n        state: ev.target.state.value,\n        postal_code: ev.target.zip.value\n      }\n    };\n\n    if (!stripe || !elements) {\n      return;\n    }\n    setProcessingTo(true);\n  \n    const cardElement = elements.getElement(CardElement);\n  \n   \n    const {error, paymentMethod} = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement,\n    });\n    \n    const confirmedCardPayment = await stripe.confirmCardPayment(ClientSecret,{\n      payment_method: paymentMethodReq.paymentMethod.id,\n    });\n  \n    if (!error) {\n        const { id } = paymentMethod;\n        console.log('[PaymentMethod]', paymentMethod);\n  \n        try {\n            const {data} = await axios.post(\"./api/paymentintent\", {id, amount: 250})\n            console.log(data);\n        } catch (error) {\n        console.log(error);\n        }\n    }\n  };\n  \n\n  return (\n    <form onSubmit={handleSubmit}>\n        <CardElement />\n      <button type=\"submit\" disabled={!stripe}>\n        Pay\n      </button>\n    </form>\n  );\n };\n export default CheckoutForm;"]},"metadata":{},"sourceType":"module"}