{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/christianorta/MyApps/arepa-store/components/CheckoutForm.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nexport default function CheckoutForm() {\n  _s();\n\n  var stripe = useStripe();\n  var elements = useElements();\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var cardElement, _yield$stripe$createP, error, paymentMethod;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // Block native form submission.\n              event.preventDefault();\n\n              if (!(!stripe || !elements)) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              // Get a reference to a mounted CardElement. Elements knows how\n              // to find your CardElement because there can only ever be one of\n              // each type of element.\n              cardElement = elements.getElement(CardElement); // Use your card Element with other Stripe.js APIs\n\n              _context.next = 6;\n              return stripe.createPaymentMethod({\n                type: 'card',\n                card: cardElement\n              });\n\n            case 6:\n              _yield$stripe$createP = _context.sent;\n              error = _yield$stripe$createP.error;\n              paymentMethod = _yield$stripe$createP.paymentMethod;\n\n              if (error) {\n                console.log('[error]', error);\n              } else {\n                console.log('[PaymentMethod]', paymentMethod);\n              }\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, __jsx(CardElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    disabled: !stripe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, \"Pay\"));\n}\n\n_s(CheckoutForm, \"EKvoGMX7lxsZ5SGPpYu2aKFzClQ=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/Users/christianorta/MyApps/arepa-store/components/CheckoutForm.jsx"],"names":["React","CardElement","useStripe","useElements","CheckoutForm","stripe","elements","handleSubmit","event","preventDefault","cardElement","getElement","createPaymentMethod","type","card","error","paymentMethod","console","log"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,EAAqBC,SAArB,EAAgCC,WAAhC,QAAkD,yBAAlD;AAEA,eAAe,SAASC,YAAT,GAAwB;AAAA;;AACrC,MAAMC,MAAM,GAAGH,SAAS,EAAxB;AACA,MAAMI,QAAQ,GAAGH,WAAW,EAA5B;;AAEA,MAAMI,YAAY;AAAA,wEAAG,iBAAOC,KAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACnB;AACAA,cAAAA,KAAK,CAACC,cAAN;;AAFmB,oBAIf,CAACJ,MAAD,IAAW,CAACC,QAJG;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAUnB;AACA;AACA;AACMI,cAAAA,WAba,GAaCJ,QAAQ,CAACK,UAAT,CAAoBV,WAApB,CAbD,EAenB;;AAfmB;AAAA,qBAgBkBI,MAAM,CAACO,mBAAP,CAA2B;AAC9DC,gBAAAA,IAAI,EAAE,MADwD;AAE9DC,gBAAAA,IAAI,EAAEJ;AAFwD,eAA3B,CAhBlB;;AAAA;AAAA;AAgBZK,cAAAA,KAhBY,yBAgBZA,KAhBY;AAgBLC,cAAAA,aAhBK,yBAgBLA,aAhBK;;AAqBnB,kBAAID,KAAJ,EAAW;AACTE,gBAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,KAAvB;AACD,eAFD,MAEO;AACLE,gBAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,aAA/B;AACD;;AAzBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZT,YAAY;AAAA;AAAA;AAAA,KAAlB;;AA4BA,SACE;AAAM,IAAA,QAAQ,EAAEA,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,QAAQ,EAAE,CAACF,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFF,CADF;AAQD;;GAxCuBD,Y;UACPF,S,EACEC,W;;;KAFKC,Y;AAwCvB","sourcesContent":["import React from 'react';\nimport {CardElement, useStripe, useElements} from '@stripe/react-stripe-js';\n\nexport default function CheckoutForm() {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async (event) => {\n    // Block native form submission.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n\n    // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n    const cardElement = elements.getElement(CardElement);\n\n    // Use your card Element with other Stripe.js APIs\n    const {error, paymentMethod} = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement,\n    });\n\n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('[PaymentMethod]', paymentMethod);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <CardElement />\n      <button type=\"submit\" disabled={!stripe}>\n        Pay\n      </button>\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}