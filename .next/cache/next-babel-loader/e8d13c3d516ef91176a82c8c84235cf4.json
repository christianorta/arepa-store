{"ast":null,"code":"var _jsxFileName = \"/Users/christianorta/MyApps/arepa-store/components/CheckoutForm.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport axios from \"axios\";\nimport styled from \"@emotion/styled\";\nimport Break from \"./Break\";\nimport BillingDetailsFields from \"./BillingDetailsFields\";\nimport SubmitButton from \"./SubmitButton\";\nimport CheckoutError from \"./CheckoutError\";\nconst CardElementContainer = styled.div`\n  height: 40px;\n  display: flex;\n  align-items: center;\n  background-color: #fff;\n\n  & .StripeElement {\n    width: 100%;\n    padding: 15px;\n  }\n`;\n\nconst CheckoutForm = ({\n  onSuccessfulCheckout\n}) => {\n  const {\n    0: isProcessing,\n    1: setProcessingTo\n  } = useState(false);\n  const {\n    0: checkoutError,\n    1: setCheckoutError\n  } = useState();\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleCardDetailsChange = ev => {\n    ev.error ? setCheckoutError(ev.error.message) : setCheckoutError();\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    const billingDetails = {\n      name: ev.target.name.value,\n      email: ev.target.email.value,\n      address: {\n        city: ev.target.city.value,\n        line1: ev.target.address.value,\n        state: ev.target.state.value,\n        postal_code: ev.target.zip.value\n      }\n    };\n    setProcessingTo(true);\n    const cardElement = elements.getElement(CardElement);\n\n    try {\n      const {\n        data: ClientSecret\n      } = await axios.post(\"/api/paymentintent\", {\n        amount: 250\n      });\n      const paymentMethodReq = await stripe.createPaymentMethod({\n        type: 'card',\n        card: cardElement,\n        billing_details: billingDetails\n      });\n\n      if (paymentMethodReq.error) {\n        setCheckoutError(paymentMethodReq.error.message);\n        setProcessingTo(false);\n        return;\n      }\n\n      const paymentIntentSuccess = await stripe.confirmCardPayment(ClientSecret, {\n        payment_method: paymentMethodReq.paymentMethod.id\n      }); //      if(error){\n      //      setCheckoutError(error.message);\n      //      setProcessingTo(false);\n      //      return;\n      //    }\n      //    const paymentIntentSuccess = await stripe.paymentIntents (id);\n\n      console.log(paymentIntentSuccess);\n      onSuccessfulCheckout();\n    } catch (err) {\n      setCheckoutError(err.message);\n    }\n  };\n\n  const iframeStyles = {\n    base: {\n      fontSize: \"16px\",\n      color: \"#2e3631\",\n      \"::placeholder\": {\n        color: \"#cae3d3\"\n      }\n    },\n    invalid: {\n      iconColor: \"#f53390\",\n      color: \"#f53390\"\n    },\n    complete: {\n      iconColor: \"#2e3631\"\n    }\n  };\n  const CardElementOptions = {\n    iconStyle: \"solid\",\n    style: iframeStyles,\n    hidePostalCode: true\n  };\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 3\n    }\n  }, __jsx(Break, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, __jsx(BillingDetailsFields, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }), __jsx(CardElementContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, __jsx(CardElement, {\n    options: CardElementOptions,\n    onChange: handleCardDetailsChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }))), checkoutError && __jsx(CheckoutError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 27\n    }\n  }, checkoutError), __jsx(Break, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, __jsx(SubmitButton, {\n    disabled: isProcessing || !stripe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, isProcessing ? \"Processing...\" : `Place Order`)));\n};\n\nexport default CheckoutForm;","map":{"version":3,"sources":["/Users/christianorta/MyApps/arepa-store/components/CheckoutForm.jsx"],"names":["React","useState","CardElement","useStripe","useElements","axios","styled","Break","BillingDetailsFields","SubmitButton","CheckoutError","CardElementContainer","div","CheckoutForm","onSuccessfulCheckout","isProcessing","setProcessingTo","checkoutError","setCheckoutError","stripe","elements","handleCardDetailsChange","ev","error","message","handleSubmit","preventDefault","billingDetails","name","target","value","email","address","city","line1","state","postal_code","zip","cardElement","getElement","data","ClientSecret","post","amount","paymentMethodReq","createPaymentMethod","type","card","billing_details","paymentIntentSuccess","confirmCardPayment","payment_method","paymentMethod","id","console","log","err","iframeStyles","base","fontSize","color","invalid","iconColor","complete","CardElementOptions","iconStyle","style","hidePostalCode"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {CardElement, useStripe, useElements} from '@stripe/react-stripe-js';\nimport axios from \"axios\";\nimport styled from \"@emotion/styled\";\n\nimport Break from \"./Break\";\nimport BillingDetailsFields from \"./BillingDetailsFields\";\nimport SubmitButton from \"./SubmitButton\";\nimport CheckoutError from \"./CheckoutError\";\n\n\nconst CardElementContainer = styled.div`\n  height: 40px;\n  display: flex;\n  align-items: center;\n  background-color: #fff;\n\n  & .StripeElement {\n    width: 100%;\n    padding: 15px;\n  }\n`;\n\nconst CheckoutForm = ({ onSuccessfulCheckout }) => {\n  const [isProcessing, setProcessingTo] = useState(false);\n  const [checkoutError, setCheckoutError] = useState();\n  \n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleCardDetailsChange = ev => {\n    ev.error ? setCheckoutError(ev.error.message) : setCheckoutError();\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n\n    const billingDetails = {\n      name: ev.target.name.value,\n      email: ev.target.email.value,\n      address: {\n        city: ev.target.city.value,\n        line1: ev.target.address.value,\n        state: ev.target.state.value,\n        postal_code: ev.target.zip.value\n      }\n    };\n\n    setProcessingTo(true);\n \n    const cardElement = elements.getElement(CardElement);\n\n    try {\n    const { data: ClientSecret } = await axios.post(\"/api/paymentintent\", {\n      amount: 250\n    });\n  \n    const paymentMethodReq = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement,\n      billing_details: billingDetails\n    });\n\n    if (paymentMethodReq.error) {\n      setCheckoutError(paymentMethodReq.error.message);\n      setProcessingTo(false);\n      return;\n    }\n\n    const paymentIntentSuccess = await stripe.confirmCardPayment(ClientSecret, {\n      payment_method: paymentMethodReq.paymentMethod.id\n    });\n\n//      if(error){\n//      setCheckoutError(error.message);\n//      setProcessingTo(false);\n//      return;\n//    }\n\n//    const paymentIntentSuccess = await stripe.paymentIntents (id);\n    console.log(paymentIntentSuccess);\n\n\n    onSuccessfulCheckout();\n  } catch (err) {\n    setCheckoutError(err.message);\n  }\n};\n\nconst iframeStyles = {\n  base: {\n    fontSize: \"16px\",\n    color: \"#2e3631\", \n    \"::placeholder\": {\n    color: \"#cae3d3\"\n    }\n  },\n  invalid: {\n    iconColor: \"#f53390\",\n    color: \"#f53390\"\n  },\n  complete: {\n    iconColor: \"#2e3631\",\n  }\n};\n  \nconst CardElementOptions = {\n  iconStyle: \"solid\",  \n  style: iframeStyles,\n  hidePostalCode: true\n};\n  \nreturn (\n  <form onSubmit={handleSubmit}>\n    <Break>\n      <BillingDetailsFields />\n        <CardElementContainer>\n          <CardElement \n          options={CardElementOptions}\n          onChange={handleCardDetailsChange}\n          />\n        </CardElementContainer>\n        </Break>\n        {checkoutError && <CheckoutError>{checkoutError}</CheckoutError>}\n        <Break>\n          <SubmitButton disabled={isProcessing || !stripe}>\n            {isProcessing ? \"Processing...\" : `Place Order`}\n          </SubmitButton>\n        </Break>\n      </form>\n    );\n};\n  \nexport default CheckoutForm;\n  "]},"metadata":{},"sourceType":"module"}