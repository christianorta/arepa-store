{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Stripe from \"stripe\";\nvar stripe = new Stripe(\"sk_test_51HGDkmHBrl2UaEgapNVQtZvVU1BTJGs8MA9jKZ8w8Lh0LHs3S1Hs3Sz6heF6AWtiVZESo13DliaVYiXe0k2oRxZm00JfFHS1nq\");\nexport default /*#__PURE__*/(function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res) {\n    var _req$body, id, amount, paymentIntent;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(req.method === \"POST\")) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.prev = 1;\n            _req$body = req.body, id = _req$body.id, amount = _req$body.amount;\n            _context.next = 5;\n            return stripe.paymentIntents.create({\n              amount: amount,\n              currency: \"usd\",\n              description: \"10 pack Arepa Lover Stickers\",\n              metadata: {\n                integration_check: 'accept_a_payment'\n              }\n            });\n\n          case 5:\n            paymentIntent = _context.sent;\n            res.status(200).send(paymentIntent.client_secret);\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            res.status(500).json({\n              statusCode: 500,\n              message: _context.t0.message\n            });\n\n          case 12:\n            _context.next = 16;\n            break;\n\n          case 14:\n            res.setHeader(\"Allow\", \"POST\");\n            res.status(405).end(\"Method Not Allowed\");\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 9]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["/Users/christianorta/MyApps/arepa-store/pages/api/paymentintent.js"],"names":["Stripe","stripe","req","res","method","body","id","amount","paymentIntents","create","currency","description","metadata","integration_check","paymentIntent","status","send","client_secret","json","statusCode","message","setHeader","end"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,IAAMC,MAAM,GAAG,IAAID,MAAJ,CAAW,6GAAX,CAAf;AAEA;AAAA,sEAAe,iBAAOE,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBACPD,GAAG,CAACE,MAAJ,KAAe,MADR;AAAA;AAAA;AAAA;;AAAA;AAAA,wBAGoBF,GAAG,CAACG,IAHxB,EAGKC,EAHL,aAGKA,EAHL,EAGSC,MAHT,aAGSA,MAHT;AAAA;AAAA,mBAKyBN,MAAM,CAACO,cAAP,CAAsBC,MAAtB,CAA6B;AACrDF,cAAAA,MAAM,EAANA,MADqD;AAErDG,cAAAA,QAAQ,EAAE,KAF2C;AAGrDC,cAAAA,WAAW,EAAE,8BAHwC;AAIrDC,cAAAA,QAAQ,EAAE;AAACC,gBAAAA,iBAAiB,EAAE;AAApB;AAJ2C,aAA7B,CALzB;;AAAA;AAKGC,YAAAA,aALH;AAWHX,YAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,aAAa,CAACG,aAAnC;AAXG;AAAA;;AAAA;AAAA;AAAA;AAcHd,YAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB;AAAEC,cAAAA,UAAU,EAAE,GAAd;AAAmBC,cAAAA,OAAO,EAAE,YAAIA;AAAhC,aAArB;;AAdG;AAAA;AAAA;;AAAA;AAkBPjB,YAAAA,GAAG,CAACkB,SAAJ,CAAc,OAAd,EAAuB,MAAvB;AACAlB,YAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBO,GAAhB,CAAoB,oBAApB;;AAnBO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import Stripe from \"stripe\";\n\nconst stripe = new Stripe(\"sk_test_51HGDkmHBrl2UaEgapNVQtZvVU1BTJGs8MA9jKZ8w8Lh0LHs3S1Hs3Sz6heF6AWtiVZESo13DliaVYiXe0k2oRxZm00JfFHS1nq\");\n\nexport default async (req, res) => {\n    if (req.method === \"POST\") {\n        try {\n            const { id, amount } = req.body;\n\n            const paymentIntent = await stripe.paymentIntents.create({\n                amount,\n                currency: \"usd\",\n                description: \"10 pack Arepa Lover Stickers\",\n                metadata: {integration_check: 'accept_a_payment'},\n            });\n            res.status(200).send(paymentIntent.client_secret);\n        }\n        catch (err) {\n            res.status(500).json({ statusCode: 500, message: err.message});\n        }\n    } \n    else {\n        res.setHeader(\"Allow\", \"POST\");\n        res.status(405).end(\"Method Not Allowed\");\n    }\n};\n"]},"metadata":{},"sourceType":"module"}